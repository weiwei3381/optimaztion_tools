const nc = require('numeric')
const SOS = require('./src/method/sos')
const BBO = require('./src/method/bbo')
const CLPSO = require('./src/method/clpso')
const ApCluster = require("./src/method/ap_cluster")
const KmeansPlus = require("./src/method/kmeansPlus")
const benchmark = require('./src/benchmark')

const fitnessFunc = ([x1, x2, x3]) => {
  return Math.pow(x1, 2) + Math.pow(x2, 2) + Math.pow(x3, 2)
}


console.log("============================开始测试============================")
// 测试numeric包
const m = [[1,3,5],[2,4,6],[7,8,9]]
console.log(nc.prettyPrint(m))
console.log(`m[0] = ${m[0]}`)
console.log(`m[1][1] = ${m[1][1]}`)
console.log(`Number.MAX_VALUE = ${Number.MAX_VALUE}`)
console.log(`Infinity = ${Infinity}`)
console.log(`a[:][1] = ${nc.transpose(m)[1]}`)



// 测试sos算法，传入的参数分别是问题维度（30），搜索下界（[-600，-600,...,-600]，
// 搜索上界[600,600,...,600]，优化函数。
const sos = new SOS(5, nc.rep([5],-600), nc.rep([5],600), benchmark.griewank)
sos.run()  // 运行共生算法
console.log("SOS优化算法搜索结果如下：")
console.log(nc.prettyPrint(sos.getResult()))

// 测试聚类数据，传入的参数为聚类数据列表，其中列表的每一项必须为Array类型（哪怕只有1维）
const testClusterData = [[4.997466681145431],[3.5474273424750185],[0.6683719650051796],[0.5165303042185637],[0.610879709948865],[0.6619784709448846],[2.960654071884335],[0.3231847756005324],[2.265587526092317],[3.7358073602334056],[0.3803850886862629],[3.3085049086844944],[0.6641296411189195],[1.8089939895516882],[6.219170173353534],[0.3187524922093109],[0.5035074179232727],[2.053960152050261],[2.825162261516325],[5.761333490356119],[1.5210793647808194],[3.6557724345819853],[1.5521985420165745],[1.448222258510577],[0.4344496440423816],[1.4403993724878394],[2.9079244526236887],[1.47858028746418],[2.3788428280454377],[0.09664053625360625],[2.1756626946712356],[0.624064907712306],[1.8054188877590658],[0.44785495877339176],[3.2544955614529187],[0.5203653160117917],[3.6823099230624776],[1.8446260817649656],[3.014024695784267],[4.012655182546209],[0.40012020178032215],[3.166616487022987],[0.538556547835928],[2.0919585598427064],[1.5010556813775011],[2.8646452199689585],[3.2992529080287794],[0.2240465339552419],[2.5635000608044547],[3.7129799705202595],[10.943631593053919],[1.143893663570887],[1.7523136775446564],[7.10814683480366],[6.360716117280519],[0.4905672207847134],[2.984861432909936],[0.49470771664771535],[0.3952504488334611],[3.5432721550113206],[2.7452991661721287],[0.698322802267145],[2.2331711958050318],[0.5152574539278387],[1.6399243590993928],[1.3328358850669155],[5.545760610137963],[0.5080965704576726],[0.5164793902069347],[2.147877595241293],[3.57413224331494],[4.361935480582408],[1.119428275977823],[3.1656829102077393],[5.597722778489337],[0.41003044187845433],[3.355710468819699],[0.5671876687685098],[4.493828487703276],[3.3613936628369636],[1.2751235130430318],[3.08899504742394],[1.348625938899566],[0.38983710267973404],[0.6191097876632401],[1.3470030926265923],[1.9744742536145923],[0.6993586478167985],[6.054194786464733],[1.0401813550519288],[3.446922933704728],[0.21408537984548073],[3.8001299307951175],[1.7738011981372745],[3.6503467397291693],[5.29877989393128],[2.7918660173788603],[1.3293872712389017],[0.39991654573380614],[0.33132656739083927],[2.8412083237127783],[3.7237895963989787],[0.4412541294311447],[0.5305301261680688],[0.38427101449112],[1.9657173407393818],[5.6785374486457005],[2.72841517100805],[0.4086902166550473],[2.954535006350604],[3.9007270684273245],[0.7175323143238611],[1.414982368842249],[2.7688282811947804],[3.505899498237638],[0.19594506203297354],[2.1267873083768154],[0.4969643940804444],[0.611326234170125],[0.7448085395442441],[3.0207014769198564],[0.5759737526378335],[3.9893612905112317],[4.119873802978431],[6.86050220730686],[2.1986900334112525],[0.33602711738176033],[2.7534599627588396],[5.341685663354765],[2.5439103742024454],[7.424814555350941],[6.384456146740608],[0.6708305137002979],[2.571515907069012],[3.4462860147117205],[3.269091733377088],[1.8698887853204487],[0.9834392932518717],[0.42766161957467147],[1.1327284515980083],[1.8667767492960787],[1.0754212439773596],[2.862140068680729],[0.23600979543958706],[1.7880675516949835],[0.4143745937879723],[0.41988976796495747],[0.7081530899149506],[0.1483121330631619],[3.719359022638152],[6.318352194855404],[0.3224346075252872],[3.254384341702874],[0.4437489160009657],[8.340946219900228],[2.64485058229513],[0.1004755480468343],[0.7735480630429351],[1.7842787257325154],[1.6593559029716236],[3.214419849323606],[3.343235587672652],[4.038348636975357],[2.228783442477844],[0.35058699345918454],[3.054443699104784],[5.548254931181822],[2.6208663050203853],[0.61588574400956],[1.6255306684603],[2.4183398921315673],[0.03485504329940244],[5.792767544115466],[5.939695612192227],[5.377342618287909],[0.3307665132629203],[0.2548629094149003],[0.5582407469183582],[0.4916019619383464],[0.4072646243294353],[0.16523051459657312],[2.3492923710320186],[2.3048298419058115],[0.6571256535244949],[0.44109738799776804],[0.6250322739332571],[0.39361870903683127],[0.4723759889605771],[2.502561907517625],[3.1013880555968254],[0.5190924657210667],[7.006197154561006],[0.33970938714010146],[2.79918713692339],[0.6502716191364024],[2.766272275721617],[5.799594826176707],[3.115494215443124],[7.925682461212492],[5.391761944463446],[0.466911728795221],[0.48279536917499927],[0.7821345388387132],[1.1345780094168818],[5.035201058924058]]
// const testClusterData = [[1.1],[2.1],[3],[1.5],[1.7],[5],[6],[4.1]]
// 测试AP聚类算法
const apCluster = new ApCluster(testClusterData)
apCluster.run()  // 运行ap聚类
console.log("AP聚类结果如下：")
console.log(apCluster.getResult())

// 测试kmeans++算法
const kmeansPlus = new KmeansPlus(testClusterData, 3)
kmeansPlus.run()
console.log("Kmeans++聚类结果如下：")
console.log(kmeansPlus.getResult())

console.log("++++++++++++++++++++++++++++测试结束++++++++++++++++++++++++++++")
